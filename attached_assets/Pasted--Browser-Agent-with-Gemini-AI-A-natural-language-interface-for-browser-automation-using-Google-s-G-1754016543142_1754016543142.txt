# Browser Agent with Gemini AI

A natural language interface for browser automation using Google's Gemini AI and Playwright.

## Features

- üß† **Natural Language Commands**: Describe what you want to do in plain English
- ü§ñ **AI-Powered Planning**: Gemini converts your requests into structured automation steps
- üåê **Browser Automation**: Execute actions on real websites using Playwright
- üì∏ **Screenshot Capture**: Take screenshots at any point in the automation
- üîÑ **Real-time Feedback**: See progress and results as they happen

## Quick Start

### 1. Setup

\`\`\`bash
# Clone or download the project
npm install

# Copy environment file and add your Gemini API key
cp .env.example .env
# Edit .env and add your GEMINI_API_KEY
\`\`\`

### 2. Get Gemini API Key

1. Go to [Google AI Studio](https://makersuite.google.com/app/apikey)
2. Create a new API key
3. Add it to your `.env` file

### 3. Run the Server

\`\`\`bash
# Development mode
npm run dev

# Production mode
npm start
\`\`\`

### 4. Open in Browser

Navigate to `http://localhost:3000` and start automating!

## Example Commands

- "Search for cats on Google"
- "Visit GitHub and take a screenshot"
- "Go to example.com and click the first link"
- "Navigate to Wikipedia and search for artificial intelligence"

## How It Works

1. **Natural Language Input**: You describe what you want to do
2. **Gemini Planning**: AI converts your request into structured automation steps
3. **Browser Execution**: Steps are executed on the Playwright browser agent
4. **Real-time Feedback**: See progress and results as they happen

## API Endpoints

### POST /api/gemini-plan
Convert natural language to automation plan
\`\`\`json
{
  "prompt": "Search for cats on Google"
}
\`\`\`

### GET /api/health
Check server status and configuration

## Deployment

### Vercel
1. Connect your GitHub repository to Vercel
2. Add `GEMINI_API_KEY` to environment variables
3. Deploy!

### Railway/Render
1. Connect your repository
2. Set environment variables
3. Deploy with Node.js buildpack

## Browser Agent API

This project works with a Playwright-based browser agent API. The default endpoint is:
`https://playwright-bqap.onrender.com`

### Available Actions:
- `POST /agent/visit` - Navigate to URL
- `POST /agent/click` - Click element
- `POST /agent/type` - Type text
- `GET /agent/screenshot` - Take screenshot
- `POST /agent/close` - Close session

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Submit a pull request

## License

MIT License - see LICENSE file for details
